C. Sort Zero
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
An array is sorted if it has no inversions
A Young Boy
You are given an array of n positive integers a1,a2,…,an.

In one operation you do the following:

Choose any integer x.
For all i such that ai=x, do ai:=0 (assign 0 to ai).
Find the minimum number of operations required to sort the array in non-decreasing order.

Input
Each test contains multiple test cases. The first line contains the number of test cases t (1≤t≤104). Description of the test cases follows.

The first line of each test case contains a single integer n (1≤n≤105).

The second line of each test case contains n positive integers a1,a2,…,an (1≤ai≤n).

It is guaranteed that the sum of n over all test cases does not exceed 105.

Output
For each test case print one integer — the minimum number of operations required to sort the array in non-decreasing order.




#include <iostream>
#include<bits/stdc++.h>
using namespace std;

void del(vector<int>&v,int target){
    for(auto it = v.begin(); it != v.end(); it++) {
             if (*it == target) {
               *it=0;
            }
     }
}

void solve(){
    int n;
    cin>>n;
        vector<int>v(n);
        unordered_multiset<int>s;
        for(int i=0;i<n;i++){
            cin>>v[i];
        }
        for(int i=0;i<n;i++){
             s.insert(v[i]);
        }
        int cnt=0;
        if(is_sorted(v.begin(),v.end())){
            cout<<cnt<<endl;
            return;
        }
        
        for(int i=0;i<n;i++){
            if(v[i]==0){
                continue;
            }
            del(v,v[i]);
            cnt++;
            vector<int>x(v);
            if(is_sorted(v.begin(),v.end())){
                cout<<cnt<<endl;
                return;
            }
        }
        //cout<<cnt<<endl;
        //return;
}

int main()
{
    
    int t;
    cin>>t;
    while(t--){
        solve();
    }
    return 0;
}
